type Account @entity {
  "Account address"
  id: ID!
  node: Bytes!
}

type NameRegistered @entity {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  txHash: String!
  name: String!
  label: Bytes!
  owner: Account!
  expires: BigInt!
}

type NameRenewed @entity {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  txHash: String!
  name: String!
  label: Bytes!
  expires: BigInt!
}

type AddressChanged @entity {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  txHash: String!
  node: Bytes!
  coinType: BigInt!
  newAddress: String!
}

type Transfer @entity {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  txHash: String!
  from: Account!
  to: Account!
  tokenId: BigInt!
}

type Subname @entity {
  id: ID!
  tokenId: BigInt!
  name: String!
  label: Bytes!
  node: Bytes!
  owner: Account!
  expires: BigInt!
  resolvedTo: Account!
  reverseResolvedFrom: Account
}